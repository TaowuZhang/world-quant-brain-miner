import Link from "next/link"
import { Brain, Download, Filter, Search, Star, StarOff } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Badge } from "@/components/ui/badge"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"

export default function ResultsPage() {
  return (
    <div className="flex flex-col min-h-screen">
      <header className="border-b">
        <div className="container flex h-16 items-center justify-between px-4 md:px-6">
          <div className="flex items-center gap-2">
            <Brain className="h-6 w-6 text-primary" />
            <span className="text-xl font-bold">AlphaMind</span>
          </div>
          <nav className="hidden md:flex gap-6">
            <Link href="/" className="text-sm font-medium hover:underline underline-offset-4">
              Home
            </Link>
            <Link href="/agents" className="text-sm font-medium hover:underline underline-offset-4">
              Agents
            </Link>
            <Link href="/networks" className="text-sm font-medium hover:underline underline-offset-4">
              Networks
            </Link>
            <Link href="/results" className="text-sm font-medium hover:underline underline-offset-4 text-primary">
              Results
            </Link>
          </nav>
          <div className="flex items-center gap-4">
            <Button variant="outline" size="sm">
              Sign In
            </Button>
            <Button size="sm">Get Started</Button>
          </div>
        </div>
      </header>
      <main className="flex-1 container px-4 py-6 md:px-6 md:py-8">
        <div className="flex items-center justify-between mb-8">
          <h1 className="text-3xl font-bold">Alpha Expressions</h1>
          <Button variant="outline" className="gap-1">
            <Download className="h-4 w-4" /> Export Results
          </Button>
        </div>
        <div className="flex flex-col gap-6">
          <div className="flex flex-col md:flex-row gap-4 justify-between">
            <div className="relative w-full md:w-96">
              <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
              <Input type="search" placeholder="Search expressions..." className="w-full pl-8" />
            </div>
            <div className="flex gap-2">
              <Select defaultValue="all">
                <SelectTrigger className="w-[180px]">
                  <SelectValue placeholder="Filter by Network" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Networks</SelectItem>
                  <SelectItem value="market">Market Trend Network</SelectItem>
                  <SelectItem value="volatility">Volatility Prediction</SelectItem>
                  <SelectItem value="sector">Sector Rotation</SelectItem>
                </SelectContent>
              </Select>
              <Button variant="outline" size="icon">
                <Filter className="h-4 w-4" />
              </Button>
            </div>
          </div>
          <Tabs defaultValue="all" className="w-full">
            <TabsList className="w-full md:w-auto">
              <TabsTrigger value="all">All Expressions</TabsTrigger>
              <TabsTrigger value="starred">Starred</TabsTrigger>
              <TabsTrigger value="recent">Recent</TabsTrigger>
              <TabsTrigger value="high-performance">High Performance</TabsTrigger>
            </TabsList>
            <TabsContent value="all" className="mt-4">
              <Card>
                <CardHeader className="pb-2">
                  <CardTitle>Alpha Expressions</CardTitle>
                  <CardDescription>
                    View and analyze all alpha expressions generated by your AI agent networks.
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead className="w-[50px]"></TableHead>
                        <TableHead>Expression</TableHead>
                        <TableHead>Network</TableHead>
                        <TableHead>Performance</TableHead>
                        <TableHead>Date Generated</TableHead>
                        <TableHead className="text-right">Actions</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {alphaExpressions.map((expression) => (
                        <TableRow key={expression.id}>
                          <TableCell>
                            <Button variant="ghost" size="icon" className="h-8 w-8">
                              {expression.starred ? (
                                <Star className="h-4 w-4 fill-primary text-primary" />
                              ) : (
                                <StarOff className="h-4 w-4" />
                              )}
                            </Button>
                          </TableCell>
                          <TableCell className="font-mono text-xs">{expression.expression}</TableCell>
                          <TableCell>
                            <Badge variant="outline">{expression.network}</Badge>
                          </TableCell>
                          <TableCell>
                            <Badge
                              variant={
                                expression.performance > 0.7
                                  ? "default"
                                  : expression.performance > 0.4
                                    ? "secondary"
                                    : "outline"
                              }
                            >
                              {(expression.performance * 100).toFixed(1)}%
                            </Badge>
                          </TableCell>
                          <TableCell>{expression.dateGenerated}</TableCell>
                          <TableCell className="text-right">
                            <Button variant="outline" size="sm">
                              View Details
                            </Button>
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </CardContent>
                <CardFooter className="flex justify-between">
                  <div className="text-sm text-muted-foreground">
                    Showing {alphaExpressions.length} of {alphaExpressions.length} expressions
                  </div>
                  <div className="flex gap-2">
                    <Button variant="outline" size="sm" disabled>
                      Previous
                    </Button>
                    <Button variant="outline" size="sm" disabled>
                      Next
                    </Button>
                  </div>
                </CardFooter>
              </Card>
            </TabsContent>
          </Tabs>
        </div>
      </main>
      <footer className="border-t">
        <div className="container flex flex-col gap-4 py-10 md:flex-row md:gap-8 md:py-12">
          <div className="flex flex-col gap-2 md:gap-4">
            <div className="flex items-center gap-2">
              <Brain className="h-5 w-5 text-primary" />
              <span className="text-lg font-bold">AlphaMind</span>
            </div>
            <p className="text-sm text-muted-foreground">AI-powered financial alpha mining platform</p>
          </div>
          <div className="ml-auto flex flex-col gap-2 md:flex-row md:gap-8">
            <div className="flex flex-col gap-2">
              <h3 className="text-sm font-medium">Platform</h3>
              <nav className="flex flex-col gap-2">
                <Link href="#" className="text-sm text-muted-foreground hover:underline">
                  Features
                </Link>
                <Link href="#" className="text-sm text-muted-foreground hover:underline">
                  Pricing
                </Link>
                <Link href="#" className="text-sm text-muted-foreground hover:underline">
                  Documentation
                </Link>
              </nav>
            </div>
            <div className="flex flex-col gap-2">
              <h3 className="text-sm font-medium">Company</h3>
              <nav className="flex flex-col gap-2">
                <Link href="#" className="text-sm text-muted-foreground hover:underline">
                  About
                </Link>
                <Link href="#" className="text-sm text-muted-foreground hover:underline">
                  Blog
                </Link>
                <Link href="#" className="text-sm text-muted-foreground hover:underline">
                  Contact
                </Link>
              </nav>
            </div>
            <div className="flex flex-col gap-2">
              <h3 className="text-sm font-medium">Legal</h3>
              <nav className="flex flex-col gap-2">
                <Link href="#" className="text-sm text-muted-foreground hover:underline">
                  Terms
                </Link>
                <Link href="#" className="text-sm text-muted-foreground hover:underline">
                  Privacy
                </Link>
              </nav>
            </div>
          </div>
        </div>
      </footer>
    </div>
  )
}

interface AlphaExpression {
  id: string
  expression: string
  network: string
  performance: number
  dateGenerated: string
  starred: boolean
}

const alphaExpressions: AlphaExpression[] = [
  {
    id: "1",
    expression: "close_5d_ret > 0.05 and volume_10d_avg > 1000000 and rsi_14 < 30",
    network: "Market Trend Network",
    performance: 0.82,
    dateGenerated: "2023-06-15",
    starred: true,
  },
  {
    id: "2",
    expression: "macd_signal > macd_line and close > sma_50 and adx_14 > 25",
    network: "Volatility Prediction",
    performance: 0.67,
    dateGenerated: "2023-06-14",
    starred: false,
  },
  {
    id: "3",
    expression: "close < lower_bollinger_20_2 and volume > volume_5d_avg * 1.5",
    network: "Sector Rotation",
    performance: 0.75,
    dateGenerated: "2023-06-13",
    starred: true,
  },
  {
    id: "4",
    expression: "rsi_14 < 30 and close_5d_ret < -0.1 and market_cap > 1000000000",
    network: "Market Trend Network",
    performance: 0.59,
    dateGenerated: "2023-06-12",
    starred: false,
  },
  {
    id: "5",
    expression: "ema_20 > ema_50 and ema_50 > ema_200 and volume_trend_5d > 0",
    network: "Global Macro Network",
    performance: 0.88,
    dateGenerated: "2023-06-11",
    starred: true,
  },
  {
    id: "6",
    expression: "sector_momentum_rank < 3 and pe_ratio < industry_avg_pe * 0.8",
    network: "Sector Rotation",
    performance: 0.35,
    dateGenerated: "2023-06-10",
    starred: false,
  },
]

