version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15-alpine
    container_name: agent-network-db
    environment:
      POSTGRES_DB: agent_network
      POSTGRES_USER: agent_user
      POSTGRES_PASSWORD: agent_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - agent-network-internal

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: agent-network-redis
    ports:
      - "6379:6379"
    networks:
      - agent-network-internal

  # Agent Hub (FastAPI)
  agent-hub:
    build:
      context: ./agent-hub
      dockerfile: Dockerfile
    container_name: agent-network-hub
    environment:
      - DATABASE_URL=postgresql://agent_user:agent_password@postgres:5432/agent_network
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-super-secret-jwt-key
      - MOONSHOT_API_KEY=${MOONSHOT_API_KEY}
      - WORLDQUANT_CREDENTIALS_PATH=/app/credentials/credential.txt
    volumes:
      - ./agent-hub/src:/app/src
      - ./credentials:/app/credentials
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
    networks:
      - agent-network-internal
      - agent-network-external

  # Alpha Generator Agent
  alpha-generator:
    build:
      context: ./alpha-generator
      dockerfile: Dockerfile
    container_name: agent-network-alpha-generator
    environment:
      - AGENT_HUB_URL=http://agent-hub:8000
      - MOONSHOT_API_KEY=${MOONSHOT_API_KEY}
      - WORLDQUANT_CREDENTIALS_PATH=/app/credentials/credential.txt
    volumes:
      - ./alpha-generator/src:/app/src
      - ./credentials:/app/credentials
      - ./results:/app/results
    depends_on:
      - agent-hub
    networks:
      - agent-network-internal

  # n8n Workflow Engine
  n8n:
    build:
      context: ./n8n
      dockerfile: Dockerfile
    container_name: agent-network-n8n
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=admin
      - N8N_BASIC_AUTH_PASSWORD=admin123
      - N8N_HOST=localhost
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - N8N_USER_MANAGEMENT_DISABLED=false
      - N8N_DIAGNOSTICS_ENABLED=false
      - WEBHOOK_URL=http://localhost:5678/
      - GENERIC_TIMEZONE=UTC
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=agent_network
      - DB_POSTGRESDB_USER=agent_user
      - DB_POSTGRESDB_PASSWORD=agent_password
      - AGENT_HUB_URL=http://agent-hub:8000
    volumes:
      - n8n_data:/home/node/.n8n
      - ./n8n/custom-nodes:/home/node/.n8n/custom
    ports:
      - "5678:5678"
    depends_on:
      - postgres
      - agent-hub
    networks:
      - agent-network-internal
      - agent-network-external

  # Frontend Application (Next.js)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: agent-network-frontend
    environment:
      - NEXT_PUBLIC_AGENT_HUB_URL=http://localhost:8000
      - NEXT_PUBLIC_N8N_URL=http://localhost:5678
      - NEXT_PUBLIC_WS_URL=ws://localhost:8000/ws
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
    ports:
      - "3000:3000"
    depends_on:
      - agent-hub
      - n8n
    networks:
      - agent-network-internal
      - agent-network-external

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: agent-network-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - agent-hub
      - n8n
    networks:
      - agent-network-external

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: agent-network-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - agent-network-internal

  grafana:
    image: grafana/grafana:latest
    container_name: agent-network-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - agent-network-internal

volumes:
  postgres_data:
  n8n_data:
  prometheus_data:
  grafana_data:

networks:
  agent-network-internal:
    driver: bridge
    internal: true
  agent-network-external:
    driver: bridge 